{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","Searchbox","onChange","onSearchChange","disabled","datas","App","event","console","log","target","value","setState","searchList","bind","title","state","fetch","then","response","json","users","this","filterMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yWAIaA,G,YAAO,SAAAC,GAAK,OAIvB,yBAAKC,UAAU,QACb,yBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eAGP,gCAAOL,EAAMI,QAAQE,KAArB,KACA,+BAAMN,EAAMI,QAAQG,UCPTC,G,MAAW,SAAAR,GAAK,OAEzB,yBAAKC,UAAU,YAIbD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,kBAAC,EAAD,CAAMO,IAAMP,EAAQC,GAAKD,QAAUA,UCX9BQ,G,MAAY,SAAAZ,GAAK,OAE5B,yBAAKC,UAAU,kBACZ,2BAAOY,SAAUb,EAAMc,eAAgBC,SAA0B,IAAhBf,EAAMgB,WCoE7CC,G,kBA9Db,aAAc,IAAD,8BACX,+CA+BFH,eAAiB,SAACI,GAChBC,QAAQC,IAAIF,EAAMG,OAAOC,OAEzB,EAAKC,SAAS,CACZC,WAAaN,EAAMG,OAAOC,SAjC5B,EAAKR,eAAiB,EAAKA,eAAeW,KAApB,gBACtB,EAAKC,MAAQ,kBAEb,EAAKC,MAAQ,CACXlB,SAAS,GACTe,WAAa,IARJ,E,iFAYO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEd,SAAWuB,S,+BA0BnC,IAAD,EAE2BC,KAAKN,MAA9BlB,EAFF,EAEEA,SAAUe,EAFZ,EAEYA,WACZU,EAAgBzB,EAAS0B,QAAO,SAAC/B,GACrC,OAAOA,EAAQE,KAAK8B,cAAcC,SAASb,EAAWY,gBAAkBhC,EAAQG,MAAM6B,cAAcC,SAASb,EAAWY,kBAG1H,OACE,yBAAKnC,UAAU,OACb,wBAAIA,UAAU,SAAd,IAAyBgC,KAAKP,MAA9B,KACF,kBAAC,EAAD,CAAWZ,eAAgBmB,KAAKnB,eAAgBE,MAAOkB,IAEvD,kBAAC,EAAD,CAAUzB,SAAUyB,S,GAvDRI,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.f34eb332.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.scss';\n\nexport const Card = props => (\n\n\n\n  <div className=\"card\">\n    <img\n      alt=\"Monster\"\n      src={`https://robohash.org/${props.monster.id}?set=set2`}\n    />\n\n  <h3> { props.monster.name } </h3>\n  <p> { props.monster.email }</p>\n\n  </div>\n)\n","\nimport React from 'react';\n\nimport { Card } from '../card/card.component.jsx';\n\nimport './card-list.style.scss';\n\n\nexport const CardList = props =>(\n\n    <div className=\"card-div\">\n\n\n    {\n      props.monsters.map(monster => (\n        <Card key={ monster.id } monster={ monster } />\n      ))\n    }\n\n    </div>\n)\n","import React from 'react';\n\nimport './search-box.style.scss';\n\nexport const Searchbox = props => (\n\n  <div className=\"search-box-div\">\n     <input onChange={props.onSearchChange} disabled={props.datas === 0}/>\n  </div>\n\n)\n","import React,{ Component } from 'react';\n\n\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component.jsx';\n\nimport { Searchbox } from './components/search-box/search-box.component.jsx'\n\nimport './Responsive.scss';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.title = \"Monters Rolodex\";\n\n    this.state = {\n      monsters:[],\n      searchList : \"\"\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users }))\n    // .then(users => console.log(users))\n  }\n  //Other life cycle methods\n  //\n  // componentDidUpdate(){\n  //\n  // }\n  //\n  // componentWillUnmount(){\n  //\n  // }\n  //\n  // shouldComponentUpdate(nextProps, nextState){\n  //\n  // }\n\n  onSearchChange = (event)=>{\n    console.log(event.target.value);\n\n    this.setState({\n      searchList : event.target.value\n    })\n\n  }\n\n  render(){\n\n    const { monsters, searchList } = this.state;\n    const filterMonster = monsters.filter((monster)=>{\n      return monster.name.toLowerCase().includes(searchList.toLowerCase()) || monster.email.toLowerCase().includes(searchList.toLowerCase())\n    });\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\"> { this.title } </h1>\n      <Searchbox onSearchChange={this.onSearchChange} datas={filterMonster}/>\n\n      <CardList monsters={filterMonster}/>\n      </div>\n    );\n\n  };\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}